<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}
    <button
      id="AddShippingAddressButton"
      class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
      style="margin-bottom: 1rem;"
    >          
      Add Shipping Address
    </button>

    <div
      id="ProductFormModalWrapper"
      style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 999; justify-content: center; align-items: center;"
    >
      <product-form
        id="ProductFormModal"
        class="product-form"
        style="background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1000; max-width: 90%; width: 600px; max-height: 90vh; overflow-y: auto; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"
        data-hide-errors="{{ gift_card_recipient_feature_active }}"
        data-section-id="{{ section.id }}"
      >
        <button
          onclick="document.querySelector('#ProductFormModalWrapper').style.display = 'none';"
          style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 3rem; cursor: pointer;"
        >
          &times;
        </button>
        <div class="product-form__error-message-wrapper" role="alert" hidden>
          <span class="svg-wrapper">
            {{- 'icon-error.svg' | inline_asset_content -}}
          </span>
          <span class="product-form__error-message"></span>
        </div>

        {%- form 'product',
          product,
          id: product_form_id,
          class: 'form',
          novalidate: 'novalidate',
          data-type: 'add-to-cart-form'
        -%}
          <input
            type="hidden"
            name="id"
            value="{{ product.selected_or_first_available_variant.id }}"
            {% if product.selected_or_first_available_variant.available == false
              or quantity_rule_soldout
              or product.selected_or_first_available_variant == null
            %}
              disabled
            {% endif %}
            class="product-variant-id"
          >

          <!-- Always-visible UK Shipping Address Form -->
          <div style="margin-top: 1rem;">
            <fieldset style="border: none; padding: 0; width: 100%">
              <legend style="font-size: 2.4rem; margin-bottom: 1rem; text-align: center; display: block; width: 100%;">
                Shipping Address
              </legend>

              <p style="font-size: 1.4rem; color: #555; margin-bottom: 2rem; line-height: 1.5;">
                Add your <strong>delivery address</strong> here and double-check it’s correct. 
                You’ll enter your <strong>billing address</strong> later at checkout.
              </p>

              <!-- First Name and Last Name (required, inline) -->
              <div class="field--inline" style="width: 100%; margin-bottom: 1rem">
                <div class="field__inner">
                  <label for="shipping-first-name" class="form__label">First Name <span class="required-asterisk">*</span></label>
                  <input
                    type="text"
                    id="shipping-first-name"
                    name="properties[Shipping First Name]"
                    placeholder="e.g., John"
                    class="input__field"
                    required
                  >
                </div>
                <div class="field__inner">
                  <label for="shipping-last-name" class="form__label">Last Name <span class="required-asterisk">*</span></label>
                  <input
                    type="text"
                    id="shipping-last-name"
                    name="properties[Shipping Last Name]"
                    placeholder="e.g., Smith"
                    class="input__field"
                    required
                  >
                </div>
              </div>

              <!-- Address Line 1 (required) -->
              <div style="margin-bottom: 1rem; margin-top: 1rem;">
                <label for="shipping-address-line1" class="form__label">Address Line 1 <span class="required-asterisk">*</span></label>
                <input
                  type="text"
                  id="shipping-address-line1"
                  name="properties[Shipping Address Line 1]"
                  placeholder="e.g., 123 Example Street"
                  class="input__field"
                  required
                >
              </div>

              <!-- Address Line 2 (optional) -->
              <div style="margin-bottom: 1rem;">
                <label for="shipping-address-line2" class="form__label">Address Line 2</label>
                <input
                  type="text"
                  id="shipping-address-line2"
                  name="properties[Shipping Address Line 2]"
                  placeholder="e.g., Apartment 4B"
                  class="input__field"
                >
              </div>

              <!-- Town/City (required) -->
              <div style="margin-bottom: 1rem;">
                <label for="shipping-town-city" class="form__label">City <span class="required-asterisk">*</span></label>
                <input
                  type="text"
                  id="shipping-town-city"
                  name="properties[Shipping Town/City]"
                  placeholder="e.g., London"
                  class="input__field"
                  required
                >
              </div>

              <!-- Postcode (required) -->
              <div style="margin-bottom: 1rem;">
                <label for="shipping-postcode" class="form__label">Postcode <span class="required-asterisk">*</span></label>
                <input
                  type="text"
                  id="shipping-postcode"
                  name="properties[Shipping Postcode]"
                  placeholder="e.g., SW1A 1AA"
                  class="input__field"
                  required
                >
              </div>

              <!-- Phone Number (required) -->
              <div style="margin-bottom: 1rem;">
                <label for="shipping-phone" class="form__label">Phone Number <span class="required-asterisk">*</span></label>
                <input
                  type="tel"
                  id="shipping-phone"
                  name="properties[Shipping Phone Number]"
                  placeholder="e.g., +44 123 456 7890"
                  class="input__field"
                  required
                />
              </div>
            </fieldset>
          </div>

          <button
            id="CustomProductSubmitButton-{{ section_id }}"
            type="button"
            style="width: 100% !important;"
            class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
          >
            Add to Cart
          </button>

          {%- if gift_card_recipient_feature_active -%}
            {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
          {%- endif -%}

          <div class="product-form__buttons">
            {%- liquid
              assign check_against_inventory = true
              if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
                assign check_against_inventory = false
              endif
              if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
                assign quantity_rule_soldout = true
              endif
            -%}
            <button
              id="ProductSubmitButton-{{ section_id }}"
              type="submit"
              name="add"
              style="width: 100% !important; display: none;"
              class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
              {% if product.selected_or_first_available_variant.available == false
                or quantity_rule_soldout
                or product.selected_or_first_available_variant == null
              %}
                disabled
              {% endif %}
            >
              <span>
                {%- if product.selected_or_first_available_variant == null -%}
                  {{ 'products.product.unavailable' | t }}
                {%- elsif product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                  {{ 'products.product.sold_out' | t }}
                {%- else -%}
                  {{ 'products.product.add_to_cart' | t }}
                {%- endif -%}
              </span>
              {%- render 'loading-spinner' -%}
            </button>
            {%- if show_dynamic_checkout -%}
              {{ form | payment_button }}
            {%- endif -%}
          </div>
        {%- endform -%}
      </product-form>
    </div>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
      data-product-page-color-scheme="gradient color-{{ section.settings.color_scheme }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          <span class="svg-wrapper">
            {{- 'icon-unavailable.svg' | inline_asset_content -}}
          </span>
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>

<script>
const idealApiKey = "ak_mf2i193lT7eRO24NyuuzH5yltVX0P";
document.getElementById("AddShippingAddressButton").addEventListener("click", function () {
  const modal = document.getElementById("ProductFormModalWrapper");
  document.body.appendChild(modal);
  modal.style.display = "flex";
});

// Input validation setup
const firstNameInput = document.getElementById("shipping-first-name");
const lastNameInput = document.getElementById("shipping-last-name");
const addressLine1Input = document.getElementById("shipping-address-line1");
const townCityInput = document.getElementById("shipping-town-city");
const postcodeInput = document.getElementById("shipping-postcode");
const phoneInput = document.getElementById("shipping-phone");

const requiredInputs = [
  firstNameInput,
  lastNameInput,
  addressLine1Input,
  townCityInput,
  postcodeInput,
  phoneInput
];

// Error message container
const errorBox = document.createElement("div");
errorBox.style.display = "none";
errorBox.style.margin = "1rem 0";
errorBox.style.padding = "0.75rem 1rem";
errorBox.style.background = "#ffe6e6";
errorBox.style.color = "#b00020";
errorBox.style.fontSize = "1.4rem";
errorBox.style.borderRadius = "6px";
errorBox.style.border = "1px solid #ffb3b3";
errorBox.style.transition = "opacity 0.3s ease";
const formElement = document.querySelector("#ProductFormModal form");
formElement.insertBefore(errorBox, formElement.firstChild);

function showError(message) {
  errorBox.textContent = message;
  errorBox.style.display = "block";
  errorBox.style.opacity = "1";
}

function hideError() {
  errorBox.style.opacity = "0";
  setTimeout(() => { errorBox.style.display = "none"; }, 300);
}

function toggleAddToCartButton() {
  const allFilled = requiredInputs.every(input => input.value.trim() !== "");
  if (allFilled) {
    document.getElementById("CustomProductSubmitButton-{{ section_id }}").disabled = false;
    document.getElementById("CustomProductSubmitButton-{{ section_id }}").classList.remove("disabled");
    formatInputs();
    hideError();
  } else {
    document.getElementById("CustomProductSubmitButton-{{ section_id }}").disabled = true;
    document.getElementById("CustomProductSubmitButton-{{ section_id }}").classList.add("disabled");
  }
}

toggleAddToCartButton();

// Phone sanitization
phoneInput.addEventListener("input", function () {
  let value = phoneInput.value;
  if (value.startsWith("+")) {
    value = "+" + value.slice(1).replace(/[^\d\s]/g, "");
  } else {
    value = value.replace(/[^\d\s]/g, "");
  }
  phoneInput.value = value;
});

// Suggestions dropdown
const suggestionBox = document.createElement("div");
suggestionBox.style.position = "absolute";
suggestionBox.style.background = "#fff";
suggestionBox.style.border = "1px solid #ccc";
suggestionBox.style.zIndex = "1001";
suggestionBox.style.width = addressLine1Input.offsetWidth + "px";
suggestionBox.style.maxHeight = "200px";
suggestionBox.style.overflowY = "auto";
suggestionBox.style.display = "none";
suggestionBox.style.boxShadow = "0 4px 8px rgba(0,0,0,0.1)";
addressLine1Input.parentNode.appendChild(suggestionBox);

addressLine1Input.addEventListener("input", async function () {
  const query = addressLine1Input.value.trim();
  if (!query) {
    suggestionBox.style.display = "none";
    return;
  }

  try {
    const response = await fetch(
      `https://api.ideal-postcodes.co.uk/v1/places?api_key=${idealApiKey}&query=${encodeURIComponent(query)}`
    );
    const data = await response.json();

    suggestionBox.innerHTML = "";

    if (data.result && data.result.length) {
      data.result.forEach(addr => {
        const item = document.createElement("div");
        item.style.padding = "0.5rem";
        item.style.cursor = "pointer";
        item.textContent = `${addr.line_1}, ${addr.post_town}, ${addr.postcode}`;
        item.addEventListener("click", () => {
          addressLine1Input.value = addr.line_1;
          if (addr.line_2) document.getElementById("shipping-address-line2").value = addr.line_2;
          townCityInput.value = addr.post_town;
          postcodeInput.value = addr.postcode;
          suggestionBox.style.display = "none";
          toggleAddToCartButton();
        });
        item.addEventListener("mouseenter", () => item.style.background = "#f0f0f0");
        item.addEventListener("mouseleave", () => item.style.background = "#fff");
        suggestionBox.appendChild(item);
      });
      suggestionBox.style.display = "block";
    } else {
      suggestionBox.style.display = "none";
    }
  } catch (err) {
    console.error("Error fetching Ideal Postcodes:", err);
    suggestionBox.style.display = "none";
  }
});

function formatInputs() {
  if (firstNameInput) firstNameInput.value = firstNameInput.value.trim();
  if (lastNameInput) lastNameInput.value = lastNameInput.value.trim();
  if (addressLine1Input) addressLine1Input.value = addressLine1Input.value.trim();
  if (townCityInput) townCityInput.value = townCityInput.value.trim();
  if (postcodeInput) postcodeInput.value = postcodeInput.value.trim().toUpperCase();
  if (phoneInput) phoneInput.value = phoneInput.value.replace(/(?!^\+)\D/g, "");
}

async function validateAddress() {
  const line1 = addressLine1Input.value.trim();
  const town = townCityInput.value.trim();
  const postcode = postcodeInput.value.trim();

  if (!line1 || !town || !postcode) {
    showError("Please fill out all required fields before continuing.");
    return false;
  }

  // Basic postcode format validation (UK postcodes typically follow AA9A 9AA, A9A 9AA, etc.)
  const postcodeRegex = /^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$/i;
  if (!postcodeRegex.test(postcode)) {
    showError("Please enter a valid UK postcode (e.g., SW1A 1AA).");
    return false;
  }

  // Basic town/city validation (should not be numeric)
  if (/^\d+$/.test(town)) {
    showError("Please enter a valid city/town name.");
    return false;
  }

  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");
  myHeaders.append("Accept", "application/json");

  const raw = JSON.stringify({
    query: `${line1}, ${town}, ${postcode}`,
    postcode: postcode,
    post_town: town
  });

  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: raw,
    redirect: "follow"
  };

  try {
    const response = await fetch(
      `https://api.ideal-postcodes.co.uk/v1/cleanse/addresses?api_key=${idealApiKey}`,
      requestOptions
    );

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();

    // Check if response contains valid data
    if (!data || !data.result) {
      showError("No valid address found. Please check and try again.");
      return false;
    }

    // Handle both array and single object responses
    const result = Array.isArray(data.result) ? data.result[0] : data.result;

    // Validate response
    if (
      !result ||
      result.confidence < 0.95 ||
      result.postcode_match !== "FULL" ||
      result.post_town_match !== "FULL" ||
      result.premise_match !== "FULL" ||
      result.thoroughfare_match !== "FULL"
    ) {
      showError("The address could not be validated. Please verify your address details or select a suggestion.");
      return false;
    }

    // Update form inputs with validated address
    addressLine1Input.value = result.line_1 || line1;
    document.getElementById("shipping-address-line2").value = result.line_2 || "";
    townCityInput.value = result.post_town || town;
    postcodeInput.value = result.postcode || postcode;

    hideError();
    return true;
  } catch (err) {
    console.error("Error validating address:", err.message);
    showError("An error occurred while validating the address. Please try again.");
    return false;
  }
}

document.getElementById("CustomProductSubmitButton-{{ section_id }}").addEventListener("click", async function () {
  const isValid = await validateAddress();
  if (isValid) {
    formatInputs();
    document.getElementById("ProductSubmitButton-{{ section_id }}").click();
    document.getElementById("ProductFormModalWrapper").style.display = "none";
  }
});

requiredInputs.forEach(input => {
  if (input) {
    input.addEventListener("input", toggleAddToCartButton);
  }
});

// Hide suggestions when clicking outside
document.addEventListener("click", function (e) {
  if (!suggestionBox.contains(e.target) && e.target !== addressLine1Input) {
    suggestionBox.style.display = "none";
  }
});
</script>